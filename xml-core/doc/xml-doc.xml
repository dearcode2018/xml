<?xml version="1.0" encoding="UTF-8"?>


<!-- 
xml extensible markup language
xml 被设计用来传输和存储数据，html 被设计用来显示数据.

xml 标签没有被预定义，需要自行定义标签
xml 被设计为具有自我描述性.

xml 不会替代html，而是html的补充.

xml 是独立于软件和硬件的信息传输工具.

xml 和 html : 将数据独立封装在xml文件中，在html中进行适当的布局后，通过javascript来加载
xml文件，然后更新html中的数据内容.
xml 数据以纯文本格式存储数据，这让不同应用程序之间共享数据变得更加容易.


 -->



<!-- 
xml 是不作为的，其本身没有任何行为，需要我们编写软件或程序，才能实现xml文档的发送、接受、显示.

xml 仅仅是纯文本，可以存储在文件或数据库中.



 -->

<!-- 

节点(7种类型) : 元素、属性、文本、命名空间、处理指令、注释、文档(根)节点 
xml 文档被作为节点树来对待，树的根被称为文档节点/根节点



 -->

<!-- 
XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。

下面列出了最有用的路径表达式：
表达式	描述
nodename	选取此节点的所有子节点。
/	从根节点选取。
//	从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
.	选取当前节点。
..	选取当前节点的父节点。
@	选取属性。



 -->
 
<!-- 

在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：
路径表达式	结果
bookstore	选取 bookstore 元素的所有子节点。
/bookstore	
选取根元素 bookstore。
注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！
bookstore/book	选取属于 bookstore 的子元素的所有 book 元素。
//book	选取所有 book 子元素，而不管它们在文档中的位置。
bookstore//book	选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。
//@lang	选取名为 lang 的所有属性。




 -->
 
<!-- 

谓语（Predicates）
谓语用来查找某个特定的节点或者包含某个指定的值的节点。
谓语被嵌在方括号中。

谓语 相当于一个投影，进行条件的过滤.

实例
在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：
路径表达式	结果
/bookstore/book[1]	选取属于 bookstore 子元素的第一个 book 元素。
/bookstore/book[last()]	选取属于 bookstore 子元素的最后一个 book 元素。
/bookstore/book[last()-1]	选取属于 bookstore 子元素的倒数第二个 book 元素。
/bookstore/book[position()<3]	选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
//title[@lang]	选取所有拥有名为 lang 的属性的 title 元素。
//title[@lang='eng']	选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
/bookstore/book[price>35.00]	选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
/bookstore/book[price>35.00]/title	选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。


 -->
 
<!-- 

xml 声明(xml的第一行) 没有关闭标签，因为声明不属于xml本身的组成部分.
xml标签对大小写敏感，
html 中会把多个连续的空格裁剪/合并为一个，而xml中空格会被保留.



 -->
 
<!-- 

XML 命名规则
XML 元素必须遵循以下命名规则：
1)名称可以含字母、数字以及其他的字符
2)名称不能以数字或者标点符号开始
3)名称不能以字符 “xml”（或者 XML、Xml）开始
4)名称不能包含空格
5)可使用任何名称，没有保留的字词

在 html 中使用属性很便利，但在xml中不建议使用属性，推荐使用元素的方式
来描述数据，因为属性的方式不利于xml的扩展.

尽量用元素来描述数据，而仅仅使用属性来提供与数据无关的信息.

元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。
 -->
 
<!-- 

通过dtd验证的xml是合法的xml

xml schema : w3c支持一种基于xml方式的验证，功能和dtd相同，
都是对xml形态的文档进行验证


 -->
 
<!-- 

用css显示xml
在xml文件的第二分行 :
<?xml-stylesheet type="text/css" href="xx.css" ?>

提示 : 使用css格式化xml不是常用的方法，w3c推荐使用
xslt来格式化xml.
xslt在浏览器显示xml之前，将xml转换为html.
<?xml-stylesheet type="text/xsl" href="xx.xsl"?>
由于不同的浏览器实施转换，其结果是不同的，为了这种问题，可以在服务器上进行xslt转换.

 -->
 
<!-- 

XMLHttpRequest对象
用于客户端与服务器交换数据.




 -->


<!-- 
xml 命名空间 (namespace)
当2多个或以上的文档使用相同的标签名时，就会发生冲突，xml解析器无法处理这个冲突，
只会简单作为同一个标签来处理，而此时这些标签的意义是不同的，这就需要定义命名空间，
通过命名空间来区分这些名称相同的标签.

例如 <f:table></f:table> 和 <h:table></h:table> 意义不同，使用命名空间（前缀）进行了区分.

<h:table xmlns:h="xxx"></h:table>

XML Namespace (xmlns) 属性
XML 命名空间属性被放置于元素的开始标签之中，并使用以下的语法：
xmlns:namespace-prefix="namespaceURI"

默认的命名空间（Default Namespaces）
为元素定义默认的命名空间可以让我们省去在所有的子元素中使用前缀的工作。
请使用下面的语法：
xmlns="namespaceURI"

 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
  
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
  
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->
 
 <!-- 






 -->
 
<!-- 






 -->

















